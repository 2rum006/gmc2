import base64
exec(base64.b64decode("aW1wb3J0IHJhbmRvbQ0KaW1wb3J0IHJlcXVlc3RzDQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwDQppbXBvcnQgb3MsIHNpZ25hbCwgc3lzDQpmcm9tIHB5ZmlnbGV0IGltcG9ydCBmaWdsZXRfZm9ybWF0DQpmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZQ0KZnJvbSByaWNoLnByb21wdCBpbXBvcnQgUHJvbXB0LCBJbnRQcm9tcHQNCmZyb20gcmljaC50ZXh0IGltcG9ydCBUZXh0DQpmcm9tIHJpY2guc3R5bGUgaW1wb3J0IFN0eWxlDQppbXBvcnQgcHlzdHlsZQ0KZnJvbSBweXN0eWxlIGltcG9ydCBDb2xvcnMsIENvbG9yYXRlDQoNCmZyb20gZ21jMiBpbXBvcnQgUGFrdW5kbw0KDQpfX0NIQU5ORUxfVVNFUk5BTUVfXyA9ICJHTUMyIg0KX19HUk9VUF9VU0VSTkFNRV9fICAgPSAiR01DMiINCg0KZGVmIHNpZ25hbF9oYW5kbGVyKHNpZywgZnJhbWUpOg0KICAgIHByaW50KCJcbiBCeWUgQnllLi4uIikNCiAgICBzeXMuZXhpdCgwKQ0KDQpkZWYgZ3JhZGllbnRfdGV4dCh0ZXh0LCBjb2xvcnMpOg0KICAgIGxpbmVzID0gdGV4dC5zcGxpdGxpbmVzKCkNCiAgICBoZWlnaHQgPSBsZW4obGluZXMpDQogICAgd2lkdGggPSBtYXgobGVuKGxpbmUpIGZvciBsaW5lIGluIGxpbmVzKQ0KICAgIGNvbG9yZnVsX3RleHQgPSBUZXh0KCkNCiAgICBmb3IgeSwgbGluZSBpbiBlbnVtZXJhdGUobGluZXMpOg0KICAgICAgICBmb3IgeCwgY2hhciBpbiBlbnVtZXJhdGUobGluZSk6DQogICAgICAgICAgICBpZiBjaGFyICE9ICcgJzoNCiAgICAgICAgICAgICAgICBjb2xvcl9pbmRleCA9IGludCgoKHggLyAod2lkdGggLSAxIGlmIHdpZHRoID4gMSBlbHNlIDEpKSArICh5IC8gKGhlaWdodCAtIDEgaWYgaGVpZ2h0ID4gMSBlbHNlIDEpKSkgKiAwLjUgKiAobGVuKGNvbG9ycykgLSAxKSkNCiAgICAgICAgICAgICAgICBjb2xvcl9pbmRleCA9IG1pbihtYXgoY29sb3JfaW5kZXgsIDApLCBsZW4oY29sb3JzKSAtIDEpICAjIEVuc3VyZSB0aGUgaW5kZXggaXMgd2l0aGluIGJvdW5kcw0KICAgICAgICAgICAgICAgIHN0eWxlID0gU3R5bGUoY29sb3I9Y29sb3JzW2NvbG9yX2luZGV4XSkNCiAgICAgICAgICAgICAgICBjb2xvcmZ1bF90ZXh0LmFwcGVuZChjaGFyLCBzdHlsZT1zdHlsZSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY29sb3JmdWxfdGV4dC5hcHBlbmQoY2hhcikNCiAgICAgICAgY29sb3JmdWxfdGV4dC5hcHBlbmQoIlxuIikNCiAgICByZXR1cm4gY29sb3JmdWxfdGV4dA0KDQpkZWYgYmFubmVyKGNvbnNvbGUpOg0KICAgIG9zLnN5c3RlbSgnY2xzJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAnY2xlYXInKQ0KICAgIGJyYW5kX25hbWUgPSBmaWdsZXRfZm9ybWF0KCdHTUMnLCBmb250PSdibG9vZHknKQ0KICAgIGNvbG9ycyA9IFsNCiAgICAgICAgInJnYigyNTUsMCwwKSIsICJyZ2IoMjU1LDY5LDApIiwgInJnYigyNTUsMTQwLDApIiwgInJnYigyNTUsMjE1LDApIiwgInJnYigxNzMsMjU1LDQ3KSIsIA0KICAgICAgICAicmdiKDAsMjU1LDApIiwgInJnYigwLDI1NSwyNTUpIiwgInJnYigwLDE5MSwyNTUpIiwgInJnYigwLDAsMjU1KSIsICJyZ2IoMTM5LDAsMjU1KSIsDQogICAgICAgICJyZ2IoMjU1LDAsMjU1KSINCiAgICBdDQogICAgY29sb3JmdWxfdGV4dCA9IGdyYWRpZW50X3RleHQoYnJhbmRfbmFtZSwgY29sb3JzKQ0KICAgIGNvbnNvbGUucHJpbnQoY29sb3JmdWxfdGV4dCkNCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1x0ICAgICAgICAg8J2Qj/CdkIvwnZCE8J2QgPCdkJLwnZCEIPCdkIvwnZCO8J2QhvCdkI7wnZCU8J2QkyDwnZCF8J2QkfCdkI7wnZCMIPCdkILwnZCP8J2QjCDwnZCB8J2QhPCdkIXwnZCO8J2QkfCdkIQg8J2QlPCdkJLwnZCI8J2QjfCdkIYg8J2Qk/CdkIfwnZCI8J2QkiDwnZCT8J2QjvCdkI7wnZCLJykpDQogICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJyAgICDwnZCS8J2Qh/CdkIDwnZCR8J2QiPCdkI3wnZCGIPCdkJPwnZCH8J2QhCDwnZCA8J2QgvCdkILwnZCE8J2QkvCdkJIg8J2QivCdkITwnZCYIPCdkIjwnZCSIPCdkI3wnZCO8J2QkyDwnZCA8J2Qi/CdkIvwnZCO8J2QlvCdkITwnZCDIPCdkIDwnZCN8J2QgyDwnZCW8J2QiPCdkIvwnZCLIPCdkIHwnZCEIPCdkIHwnZCL8J2QjvCdkILwnZCK8J2QhPCdkIMnKSkgDQogICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZicgICAgICDwnZCC8J2QjvCdkI3wnZCT8J2QgPCdkILwnZCTIPCdkIzwnZCEIPCdkJPwnZCOIPCdkIHwnZCU8J2QmCDwnZCU8J2QjfCdkIvwnZCI8J2QjPCdkIjwnZCT8J2QhPCdkIMg8J2QgfCdkIDwnZCL8J2QgPCdkI3wnZCC8J2QhCDwnZCT8J2QhiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffScpKSANCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJyDigIwgICAgICAgICAgIPCdkJPwnZCe8J2QpfCdkJ7wnZCg8J2Qq/CdkJrwnZCmOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffSDwnZCO8J2QqyBAe19fR1JPVVBfVVNFUk5BTUVfX30nKSkNCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQoNCmRlZiBsb2FkX3BsYXllcl9kYXRhKGNwbSk6DQogICAgcmVzcG9uc2UgPSBjcG0uZ2V0X3BsYXllcl9kYXRhKCkNCiAgICBpZiByZXNwb25zZS5nZXQoJ29rJyk6DQogICAgICAgIGRhdGEgPSByZXNwb25zZS5nZXQoJ2RhdGEnKQ0KICAgICAgICBpZiAnZmxvYXRzJyBpbiBkYXRhIGFuZCAnbG9jYWxJRCcgaW4gZGF0YSBhbmQgJ21vbmV5JyBpbiBkYXRhIGFuZCAnY29pbicgaW4gZGF0YToNCiAgICAgICAgDQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJz09PT09PT09PT1bIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30gXT09PT09PT09PT0nKSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidOYW1lICAgOiB7KGRhdGEuZ2V0KCJOYW1lIikgaWYgIk5hbWUiIGluIGRhdGEgZWxzZSAiVU5ERUZJTkVEIil9LicpKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidMb2NhbElEOiB7ZGF0YS5nZXQoImxvY2FsSUQiKX0uJykpDQogICAgICAgICAgICANCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnTW9uZXkgIDoge2RhdGEuZ2V0KCJtb25leSIpfS4nKSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidDb2lucyAgOiB7ZGF0YS5nZXQoImNvaW4iKX0uJykpDQogICAgICAgICAgICANCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICchIEVSUk9SOiBuZXcgYWNjb3VudHMgbW9zdCBiZSBzaWduZWQtaW4gdG8gdGhlIGdhbWUgYXQgbGVhc3Qgb25jZSAhLicpKQ0KICAgICAgICAgICAgZXhpdCgxKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICchIEVSUk9SOiBzZWVtcyBsaWtlIHlvdXIgbG9naW4gaXMgbm90IHByb3Blcmx5IHNldCAhLicpKQ0KICAgICAgICBleGl0KDEpDQoNCg0KZGVmIGxvYWRfa2V5X2RhdGEoY3BtKToNCg0KICAgIGRhdGEgPSBjcG0uZ2V0X2tleV9kYXRhKCkNCiAgICANCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJz09PT09PT09WyB7X19DSEFOTkVMX1VTRVJOQU1FX199IF09PT09PT09PScpKQ0KICAgIA0KICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnQWNjZXNzIEtleSA6IHtkYXRhLmdldCgiYWNjZXNzX2tleSIpfS4nKSkNCiAgICANCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RlbGVncmFtIElEOiB7ZGF0YS5nZXQoInRlbGVncmFtX2lkIil9LicpKQ0KICAgIA0KICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnQmFsYW5jZSAkICA6IHsoZGF0YS5nZXQoImNvaW5zIikgaWYgbm90IGRhdGEuZ2V0KCJpc191bmxpbWl0ZWQiKSBlbHNlICJVbmxpbWl0ZWQiKX0uJykpDQogICAgICAgIA0KICAgIA0KDQpkZWYgcHJvbXB0X3ZhbGlkX3ZhbHVlKGNvbnRlbnQsIHRhZywgcGFzc3dvcmQ9RmFsc2UpOg0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIHZhbHVlID0gUHJvbXB0LmFzayhjb250ZW50LCBwYXNzd29yZD1wYXNzd29yZCkNCiAgICAgICAgaWYgbm90IHZhbHVlIG9yIHZhbHVlLmlzc3BhY2UoKToNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYne3RhZ30gY2Fubm90IGJlIGVtcHR5IG9yIGp1c3Qgc3BhY2VzLiBQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlDQogICAgICAgICAgICANCmRlZiBsb2FkX2NsaWVudF9kZXRhaWxzKCk6DQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHA6Ly9pcC1hcGkuY29tL2pzb24iKQ0KICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkNCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJz09PT09PT09PT09PT1bIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30gXT09PT09PT09PT09PT0nKSkNCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ0lwIEFkZHJlc3MgOiB7ZGF0YS5nZXQoInF1ZXJ5Iil9LicpKQ0KICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnTG9jYXRpb24gICA6IHtkYXRhLmdldCgiY2l0eSIpfSB7ZGF0YS5nZXQoInJlZ2lvbk5hbWUiKX0ge2RhdGEuZ2V0KCJjb3VudHJ5Q29kZSIpfS4nKSkNCiAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ0NvdW50cnkgICAgOiB7ZGF0YS5nZXQoImNvdW50cnkiKX0ge2RhdGEuZ2V0KCJ6aXAiKX0uJykpDQogICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZic9PT09PT09PT09PT09PT1bIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30gXT09PT09PT09PT09PT09PScpKQ0KDQpkZWYgaW50ZXJwb2xhdGVfY29sb3Ioc3RhcnRfY29sb3IsIGVuZF9jb2xvciwgZnJhY3Rpb24pOg0KICAgIHN0YXJ0X3JnYiA9IHR1cGxlKGludChzdGFydF9jb2xvcltpOmkrMl0sIDE2KSBmb3IgaSBpbiAoMSwgMywgNSkpDQogICAgZW5kX3JnYiA9IHR1cGxlKGludChlbmRfY29sb3JbaTppKzJdLCAxNikgZm9yIGkgaW4gKDEsIDMsIDUpKQ0KICAgIGludGVycG9sYXRlZF9yZ2IgPSB0dXBsZShpbnQoc3RhcnQgKyBmcmFjdGlvbiAqIChlbmQgLSBzdGFydCkpIGZvciBzdGFydCwgZW5kIGluIHppcChzdGFydF9yZ2IsIGVuZF9yZ2IpKQ0KICAgIHJldHVybiAiezowMnh9ezowMnh9ezowMnh9Ii5mb3JtYXQoKmludGVycG9sYXRlZF9yZ2IpDQoNCmRlZiByYWluYm93X2dyYWRpZW50X3N0cmluZyhjdXN0b21lcl9uYW1lKToNCiAgICBtb2RpZmllZF9zdHJpbmcgPSAiIg0KICAgIG51bV9jaGFycyA9IGxlbihjdXN0b21lcl9uYW1lKQ0KICAgIHN0YXJ0X2NvbG9yID0gIns6MDZ4fSIuZm9ybWF0KHJhbmRvbS5yYW5kaW50KDAsIDB4RkZGRkZGKSkNCiAgICBlbmRfY29sb3IgPSAiezowNnh9Ii5mb3JtYXQocmFuZG9tLnJhbmRpbnQoMCwgMHhGRkZGRkYpKQ0KICAgIGZvciBpLCBjaGFyIGluIGVudW1lcmF0ZShjdXN0b21lcl9uYW1lKToNCiAgICAgICAgZnJhY3Rpb24gPSBpIC8gbWF4KG51bV9jaGFycyAtIDEsIDEpDQogICAgICAgIGludGVycG9sYXRlZF9jb2xvciA9IGludGVycG9sYXRlX2NvbG9yKHN0YXJ0X2NvbG9yLCBlbmRfY29sb3IsIGZyYWN0aW9uKQ0KICAgICAgICBtb2RpZmllZF9zdHJpbmcgKz0gZidbe2ludGVycG9sYXRlZF9jb2xvcn1de2NoYXJ9Jw0KICAgIHJldHVybiBtb2RpZmllZF9zdHJpbmcNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBjb25zb2xlID0gQ29uc29sZSgpDQogICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBzaWduYWxfaGFuZGxlcikNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBiYW5uZXIoY29uc29sZSkNCiAgICAgICAgYWNjX2VtYWlsID0gcHJvbXB0X3ZhbGlkX3ZhbHVlKCJbYm9sZF1bP10gQWNjb3VudCBFbWFpbFsvYm9sZF0iLCAiRW1haWwiLCBwYXNzd29yZD1GYWxzZSkNCiAgICAgICAgYWNjX3Bhc3N3b3JkID0gcHJvbXB0X3ZhbGlkX3ZhbHVlKCJbYm9sZF1bP10gQWNjb3VudCBQYXNzd29yZFsvYm9sZF0iLCAiUGFzc3dvcmQiLCBwYXNzd29yZD1GYWxzZSkNCiAgICAgICAgYWNjX2FjY2Vzc19rZXkgPSBwcm9tcHRfdmFsaWRfdmFsdWUoIltib2xkXVs/XSBBY2Nlc3MgS2V5Wy9ib2xkXSIsICJBY2Nlc3MgS2V5IiwgcGFzc3dvcmQ9RmFsc2UpDQogICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIGN5YW5dWyVdIFRyeWluZyB0byBMb2dpblsvYm9sZCBjeWFuXTogIiwgZW5kPU5vbmUpDQogICAgICAgIGNwbSA9IFBha3VuZG8oYWNjX2FjY2Vzc19rZXkpDQogICAgICAgIGxvZ2luX3Jlc3BvbnNlID0gY3BtLmxvZ2luKGFjY19lbWFpbCwgYWNjX3Bhc3N3b3JkKQ0KICAgICAgICBpZiBsb2dpbl9yZXNwb25zZSAhPSAwOg0KICAgICAgICAgICAgaWYgbG9naW5fcmVzcG9uc2UgPT0gMTAwOg0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdBQ0NPVU5UIE5PVCBGT1VORC4nKSkNCiAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIGxvZ2luX3Jlc3BvbnNlID09IDEwMToNCiAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnV1JPTkcgUEFTU1dPUkQuJykpDQogICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBsb2dpbl9yZXNwb25zZSA9PSAxMDM6DQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0lOVkFMSUQgQUNDRVNTIEtFWS4nKSkNCiAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdUUlkgQUdBSU4uJykpDQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJyEgTm90ZTogbWFrZSBzdXJlIHlvdSBmaWxsZWQgb3V0IHRoZSBmaWVsZHMgIS4nKSkNCiAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTC4nKSkNCiAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgICAgICBiYW5uZXIoY29uc29sZSkNCiAgICAgICAgICAgIGxvYWRfcGxheWVyX2RhdGEoY3BtKQ0KICAgICAgICAgICAgbG9hZF9rZXlfZGF0YShjcG0pDQogICAgICAgICAgICBsb2FkX2NsaWVudF9kZXRhaWxzKCkNCiAgICAgICAgICAgIGNob2ljZXMgPSBbIjAiLCAiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiLCAiMTAiLCAiMTEiLCAiMTIiLCAiMTMiLCAiMTQiLCAiMTUiLCAiMTYiLCAiMTciLCAiMTgiLCAiMTkiLCAiMjAiLCAiMjEiLCAiMjIiLCAiMjMiLCAiMjQiLCAiMjUiLCAiMjYiLCAiMjciLCAiMjgiLCAiMjkiLCAiMzAiLCAiMzEiLCAiMzIiXQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3swMX06IEluY3JlYXNlIE1vbmV5ICAgICAgICAgICAxLjVLJykpDQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnezAyfTogSW5jcmVhc2UgQ29pbnMgICAgICAgICAgIDQuNUsnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MDN9OiBLaW5nIFJhbmsgICAgICAgICAgICAgICAgOEsnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MDR9OiBDaGFuZ2UgSUQgICAgICAgICAgICAgICAgNC41SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3swNX06IENoYW5nZSBOYW1lICAgICAgICAgICAgICAxMDAnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MDZ9OiBDaGFuZ2UgTmFtZSAoUmFpbmJvdykgICAgMTAwJykpDQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnezA3fTogTnVtYmVyIFBsYXRlcyAgICAgICAgICAgIDJLJykpDQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnezA4fTogQWNjb3VudCBEZWxldGUgICAgICAgICAgIEZSRUUnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MDl9OiBBY2NvdW50IFJlZ2lzdGVyICAgICAgICAgRlJFRScpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxMH06IERlbGV0ZSBGcmllbmRzICAgICAgICAgICA1MDAnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MTF9OiBVbmxvY2sgUGFpZCBDYXJzICAgICAgICAgNWsnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MTJ9OiBVbmxvY2sgYWxsIENhcnMgICAgICAgICAgNksnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7MTN9OiBVbmxvY2sgYWxsIENhcnMgU2lyZW4gICAgMy41SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxNH06IFVubG9jayB3MTYgRW5naW5lICAgICAgICA0SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxNX06IFVubG9jayBBbGwgSG9ybnMgICAgICAgICAzSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxNn06IFVubG9jayBEaXNhYmxlIERhbWFnZSAgICAzSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxN306IFVubG9jayBVbmxpbWl0ZWQgRnVlbCAgICAzSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxOH06IFVubG9jayBIb3VzZSAzICAgICAgICAgICA0SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3sxOX06IFVubG9jayBTbW9rZSAgICAgICAgICAgICA0SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syMH06IFVubG9jayBXaGVlbHMgICAgICAgICAgICA0SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syMX06IFVubG9jayBBbmltYXRpb25zICAgICAgICAySycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syMn06IFVubG9jayBFcXVpcGFtZW50cyBNICAgICAzSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syM306IFVubG9jayBFcXVpcGFtZW50cyBGICAgICAzSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syNH06IENoYW5nZSBSYWNlIFdpbnMgICAgICAgICAxSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syNX06IENoYW5nZSBSYWNlIExvc2VzICAgICAgICAxSycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syNn06IENsb25lIEFjY291bnQgICAgICAgICAgICA3SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3syN306IEN1c3RvbSBIUCAgICAgICAgICAgICAgICAyLjVLJykpDQogICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnezI4fTogQ3VzdG9tIEFuZ2xlICAgICAgICAgICAgIDEuNUsnKSkNCiAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd7Mjl9OiBDdXN0b20gVGlyZSBidXJuZXIgICAgICAgMS41SycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3szMH06IEN1c3RvbSBDYXIgTWlsbGFnZSAgICAgICAySycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3szMX06IEN1c3RvbSBDYXIgQnJha2UgICAgICAgICAySycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3szMn06IENoYW5nZSBBY2NvdW50IEVtYWlsICAgICAySycpKQ0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ3swfSA6IEV4aXQnKSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZic9PT09PT09PT09PT09PT1bIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30gXT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBzZXJ2aWNlID0gSW50UHJvbXB0LmFzayhmIltib2xkXVs/XSBTZWxlY3QgYSBTZXJ2aWNlIFtyZWRdWzEte2Nob2ljZXNbLTFdfSBvciAwXVsvcmVkXVsvYm9sZF0iLCBjaG9pY2VzPWNob2ljZXMsIHNob3dfY2hvaWNlcz1GYWxzZSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZic9PT09PT09PT09PT09PT1bIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30gXT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiBzZXJ2aWNlID09IDA6DQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lbDogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTogIyBJbmNyZWFzZSBNb25leQ0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbP10gSW5zZXJ0IGhvdyBtdWNoIG1vbmV5IGRvIHlvdSB3YW50LicpKQ0KICAgICAgICAgICAgICAgIGFtb3VudCA9IEludFByb21wdC5hc2soIls/XSBBbW91bnQiKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBTYXZpbmcgeW91ciBkYXRhOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBhbW91bnQgPiAwIGFuZCBhbW91bnQgPD0gNTAwMDAwMDAwOg0KICAgICAgICAgICAgICAgICAgICBpZiBjcG0uc2V0X3BsYXllcl9tb25leShhbW91bnQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB1c2UgdmFsaWQgdmFsdWVzLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDI6DQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1s/XSBJbnNlcnQgaG93IG11Y2ggY29pbnMgZG8geW91IHdhbnQuJykpDQogICAgICAgICAgICAgICAgYW1vdW50ID0gSW50UHJvbXB0LmFzaygiWz9dIEFtb3VudCIpDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIFNhdmluZyB5b3VyIGRhdGE6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGFtb3VudCA+IDAgYW5kIGFtb3VudCA8PSA1MDAwMDA6DQogICAgICAgICAgICAgICAgICAgIGlmIGNwbS5zZXRfcGxheWVyX2NvaW5zKGFtb3VudCk6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHVzZSB2YWxpZCB2YWx1ZXMuJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMzoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCByZWRdWyFdIE5vdGU6Wy9ib2xkIHJlZF06IGlmIHRoZSBraW5nIHJhbmsgZG9lc24ndCBhcHBlYXIgaW4gZ2FtZSwgY2xvc2UgaXQgYW5kIG9wZW4gZmV3IHRpbWVzLiIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIHJlZF1bIV0gTm90ZTpbL2JvbGQgcmVkXTogcGxlYXNlIGRvbid0IGRvIEtpbmcgUmFuayBvbiBzYW1lIGFjY291bnQgdHdpY2UuIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gR2l2aW5nIHlvdSBhIEtpbmcgUmFuazogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLnNldF9wbGF5ZXJfcmFuaygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSA0Og0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbP10gRW50ZXIgeW91ciBuZXcgSUQuJykpDQogICAgICAgICAgICAgICAgbmV3X2lkID0gUHJvbXB0LmFzaygiWz9dIElEIikNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gU2F2aW5nIHlvdXIgZGF0YTogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgbGVuKG5ld19pZCkgPj0gMCBhbmQgbGVuKG5ld19pZCkgPD0gOTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OSBhbmQgKCcgJyBpbiBuZXdfaWQpID09IEZhbHNlOg0KICAgICAgICAgICAgICAgICAgICBpZiBjcG0uc2V0X3BsYXllcl9sb2NhbGlkKG5ld19pZC51cHBlcigpKToNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdXNlIHZhbGlkIElELicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDU6DQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1s/XSBFbnRlciB5b3VyIG5ldyBOYW1lLicpKQ0KICAgICAgICAgICAgICAgIG5ld19uYW1lID0gUHJvbXB0LmFzaygiWz9dIE5hbWUiKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBTYXZpbmcgeW91ciBkYXRhOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBsZW4obmV3X25hbWUpID49IDAgYW5kIGxlbihuZXdfbmFtZSkgPD0gOTk5OTk5OTk5Og0KICAgICAgICAgICAgICAgICAgICBpZiBjcG0uc2V0X3BsYXllcl9uYW1lKG5ld19uYW1lKToNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdXNlIHZhbGlkIHZhbHVlcy4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSA2Og0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbP10gRW50ZXIgeW91ciBuZXcgUmFpbmJvdyBOYW1lLicpKQ0KICAgICAgICAgICAgICAgIG5ld19uYW1lID0gUHJvbXB0LmFzaygiWz9dIE5hbWUiKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBTYXZpbmcgeW91ciBkYXRhOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBsZW4obmV3X25hbWUpID49IDAgYW5kIGxlbihuZXdfbmFtZSkgPD0gOTk5OTk5OTk5Og0KICAgICAgICAgICAgICAgICAgICBpZiBjcG0uc2V0X3BsYXllcl9uYW1lKHJhaW5ib3dfZ3JhZGllbnRfc3RyaW5nKG5ld19uYW1lKSk6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHVzZSB2YWxpZCB2YWx1ZXMuJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gNzoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gR2l2aW5nIHlvdSBhIE51bWJlciBQbGF0ZXM6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS5zZXRfcGxheWVyX3BsYXRlcygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSA4Og0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbIV0gQWZ0ZXIgZGVsZXRpbmcgeW91ciBhY2NvdW50IHRoZXJlIGlzIG5vIGdvaW5nIGJhY2sgISEuJykpDQogICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBEZWxldGUgdGhpcyBBY2NvdW50ID8hIiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjoNCiAgICAgICAgICAgICAgICAgICAgY3BtLmRlbGV0ZSgpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gOToNCiAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnWyFdIFJlZ2lzdHJpbmcgbmV3IEFjY291bnQuJykpDQogICAgICAgICAgICAgICAgYWNjMl9lbWFpbCA9IHByb21wdF92YWxpZF92YWx1ZSgiWz9dIEFjY291bnQgRW1haWwiLCAiRW1haWwiLCBwYXNzd29yZD1GYWxzZSkNCiAgICAgICAgICAgICAgICBhY2MyX3Bhc3N3b3JkID0gcHJvbXB0X3ZhbGlkX3ZhbHVlKCJbP10gQWNjb3VudCBQYXNzd29yZCIsICJQYXNzd29yZCIsIHBhc3N3b3JkPUZhbHNlKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBDcmVhdGluZyBuZXcgQWNjb3VudDogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgc3RhdHVzID0gY3BtLnJlZ2lzdGVyKGFjYzJfZW1haWwsIGFjYzJfcGFzc3dvcmQpDQogICAgICAgICAgICAgICAgaWYgc3RhdHVzID09IDA6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ0lORk86IEluIG9yZGVyIHRvIHR3ZWFrIHRoaXMgYWNjb3VudCB3aXRoIHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICd5b3UgbW9zdCBzaWduLWluIHRvIHRoZSBnYW1lIHVzaW5nIHRoaXMgYWNjb3VudC4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBlbGlmIHN0YXR1cyA9PSAxMDU6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdUaGlzIGVtYWlsIGlzIGFscmVhZHkgZXhpc3RzICEuJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTA6DQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIERlbGV0aW5nIHlvdXIgRnJpZW5kczogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLmRlbGV0ZV9wbGF5ZXJfZnJpZW5kcygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAxMToNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbIV0gTm90ZTogdGhpcyBmdW5jdGlvbiB0YWtlcyBhIHdoaWxlIHRvIGNvbXBsZXRlLCBwbGVhc2UgZG9uJ3QgY2FuY2VsLiIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBVbmxvY2tpbmcgQWxsIFBhaWQgQ2FyczogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLnVubG9ja19wYWlkX2NhcnMoKToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTI6DQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIFVubG9ja2luZyBBbGwgQ2FyczogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLnVubG9ja19hbGxfY2FycygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAxMzoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gVW5sb2NraW5nIEFsbCBDYXJzIFNpcmVuOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5sb2NrX2FsbF9jYXJzX3NpcmVuKCk6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDE0Og0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBVbmxvY2tpbmcgdzE2IEVuZ2luZTogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLnVubG9ja193MTYoKToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTU6DQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIFVubG9ja2luZyBBbGwgSG9ybnM6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS51bmxvY2tfaG9ybnMoKToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTY6DQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIFVubG9ja2luZyBEaXNhYmxlIERhbWFnZTogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLmRpc2FibGVfZW5naW5lX2RhbWFnZSgpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAxNzoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gVW5sb2NraW5nIFVubGltaXRlZCBGdWVsOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5saW1pdGVkX2Z1ZWwoKToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykpDQogICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BsZWFzZSB0cnkgYWdhaW4uJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMTg6DQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIFVubG9ja2luZyBIb3VzZSAzOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5sb2NrX2hvdXNlcygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAxOToNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gVW5sb2NraW5nIFNtb2tlOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5sb2NrX3Ntb2tlKCk6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDIwOg0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBVbmxvY2tpbmcgV2hlZWxzOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5sb2NrX3doZWVscygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAyMToNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gVW5sb2NraW5nIEFuaW1hdGlvbnM6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS51bmxvY2tfYW5pbWF0aW9ucygpOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgZidUaGFuayBZb3UgZm9yIHVzaW5nIG91ciB0b29sLCBwbGVhc2Ugam9pbiBvdXIgdGVsZWdyYW0gY2hhbm5lOiBAe19fQ0hBTk5FTF9VU0VSTkFNRV9ffS4nKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUGxlYXNlIHRyeSBhZ2Fpbi4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAyMjoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gVW5sb2NraW5nIEVxdWlwYW1lbnRzIE1hbGU6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS51bmxvY2tfZXF1aXBtZW50c19tYWxlKCk6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDIzOg0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlslXSBVbmxvY2tpbmcgRXF1aXBhbWVudHMgRmVtYWxlOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0udW5sb2NrX2VxdWlwbWVudHNfZmVtYWxlKCk6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQuJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDI0Og0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbIV0gSW5zZXJ0IGhvdyBtdWNoIHJhY2VzIHlvdSB3aW4uJykpDQogICAgICAgICAgICAgICAgYW1vdW50ID0gSW50UHJvbXB0LmFzaygiWz9dIEFtb3VudCIpDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiWyVdIENoYW5naW5nIHlvdXIgZGF0YTogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgYW1vdW50ID4gMCBhbmQgYW1vdW50IDw9IDk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OToNCiAgICAgICAgICAgICAgICAgICAgaWYgY3BtLnNldF9wbGF5ZXJfd2lucyhhbW91bnQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQbGVhc2UgdHJ5IGFnYWluLicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1shXSBQbGVhc2UgdXNlIHZhbGlkIHZhbHVlcy4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAyNToNCiAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnWyFdIEluc2VydCBob3cgbXVjaCByYWNlcyB5b3UgbG9zZS4nKSkNCiAgICAgICAgICAgICAgICBhbW91bnQgPSBJbnRQcm9tcHQuYXNrKCJbP10gQW1vdW50IikNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gQ2hhbmdpbmcgeW91ciBkYXRhOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBhbW91bnQgPiAwIGFuZCBhbW91bnQgPD0gOTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5Og0KICAgICAgICAgICAgICAgICAgICBpZiBjcG0uc2V0X3BsYXllcl9sb3NlcyhhbW91bnQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIls/XSBEbyBZb3Ugd2FudCB0byBFeGl0ID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbIV0gUGxlYXNlIHVzZSB2YWxpZCB2YWx1ZXMuJykpDQogICAgICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVELicpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnWyFdIFBsZWFzZSB1c2UgdmFsaWQgdmFsdWVzLicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDI2Og0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbIV0gUGxlYXNlIEVudGVyIEFjY291bnQgRGV0YWxpcy4nKSkNCiAgICAgICAgICAgICAgICB0b19lbWFpbCA9IHByb21wdF92YWxpZF92YWx1ZSgiWz9dIEFjY291bnQgRW1haWwiLCAiRW1haWwiLCBwYXNzd29yZD1GYWxzZSkNCiAgICAgICAgICAgICAgICB0b19wYXNzd29yZCA9IHByb21wdF92YWxpZF92YWx1ZSgiWz9dIEFjY291bnQgUGFzc3dvcmQiLCAiUGFzc3dvcmQiLCBwYXNzd29yZD1GYWxzZSkNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbJV0gQ2xvbmluZyB5b3VyIGFjY291bnQ6ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS5hY2NvdW50X2Nsb25lKHRvX2VtYWlsLCB0b19wYXNzd29yZCk6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdTVUNDRVNTRlVMJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiWz9dIERvIFlvdSB3YW50IHRvIEV4aXQgPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCBmJ1RoYW5rIFlvdSBmb3IgdXNpbmcgb3VyIHRvb2wsIHBsZWFzZSBqb2luIG91ciB0ZWxlZ3JhbSBjaGFubmU6IEB7X19DSEFOTkVMX1VTRVJOQU1FX199LicpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6ICAgICANCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1shXSBUSEFUIFJFQ0lFVkVSIEFDQ09VTlQgSVMgR01BSUwgUEFTU1dPUkQgSVMgTk9UIFZBTElEIE9SIFRIQVQgQUNDT1VOVCBJUyBOT1QgUkVHSVNURVJFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAyNzoNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCB5ZWxsb3ddWyFdIE5vdGVbL2JvbGQgeWVsbG93XTogb3JpZ2luYWwgc3BlZWQgY2FuIG5vdCBiZSByZXN0b3JlZCEuIikNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCBjeWFuXVshXSBFbnRlciBDYXIgRGV0YWlscy5bL2JvbGQgY3lhbl0iKQ0KICAgICAgICAgICAgICAgIGNhcl9pZCA9IEludFByb21wdC5hc2soIltib2xkXVs/XSBDYXIgSWRbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBuZXdfaHAgPSBJbnRQcm9tcHQuYXNrKCJbYm9sZF1bP11FbnRlciBOZXcgSFBbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBuZXdfaW5uZXJfaHAgPSBJbnRQcm9tcHQuYXNrKCJbYm9sZF1bP11FbnRlciBOZXcgSW5uZXIgSHBbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBuZXdfbm0gPSBJbnRQcm9tcHQuYXNrKCJbYm9sZF1bP11FbnRlciBOZXcgVG9ycXVlWy9ib2xkXSIpDQogICAgICAgICAgICAgICAgbmV3X3RvcnF1ZSA9IEludFByb21wdC5hc2soIltib2xkXVs/XUVudGVyIE5ldyBOTVsvYm9sZF0iKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIGN5YW5dWyVdIEhhY2tpbmcgQ2FyIFNwZWVkWy9ib2xkIGN5YW5dOiIsZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLmhhY2tfY2FyX3NwZWVkKGNhcl9pZCwgbmV3X2hwLCBuZXdfaW5uZXJfaHAsIG5ld19ubSwgbmV3X3RvcnF1ZSk6DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIGdyZWVuXVNVQ0NFU0ZVTCAo4pyUKVsvYm9sZCBncmVlbl0iKQ0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpDQogICAgICAgICAgICAgICAgICAgIGFuc3cgPSBQcm9tcHQuYXNrKCJbP10gRG8gWW91IHdhbnQgdG8gRXhpdCA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csIGYnVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbCwgcGxlYXNlIGpvaW4gb3VyIHRlbGVncmFtIGNoYW5uZTogQHtfX0NIQU5ORUxfVVNFUk5BTUVfX30uJykpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRC4nKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1shXSBQbGVhc2UgdXNlIHZhbGlkIHZhbHVlcy4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAyODoNCiAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnWyFdIEVOVEVSIENBUiBERVRBTElTJykpDQogICAgICAgICAgICAgICAgY2FyX2lkID0gSW50UHJvbXB0LmFzaygiW2JvbGRdWz9dIENBUiBJRFsvYm9sZF0iKQ0KICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdbIV0gRU5URVIgU1RFRVJJTkcgQU5HTEUnKSkNCiAgICAgICAgICAgICAgICBjdXN0b20gPSBJbnRQcm9tcHQuYXNrKCJbcmVkXVs/Xe+7v0VOVEVSIFRIRSBBTU9VTlQgT0YgQU5HTEUgWU9VIFdBTlRbL3JlZF0iKSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbcmVkXVslXSBIQUNLSU5HIENBUiBBTkdMRVsvcmVkXTogIiwgZW5kPU5vbmUpDQogICAgICAgICAgICAgICAgaWYgY3BtLm1heF9tYXgxKGNhcl9pZCwgY3VzdG9tKToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1NVQ0NFU1NGVUwnKSkNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIltyZWRdWz9dIERPIFlPVSBXQU5UIFRPIEVYSVRbL3JlZF0gPyIsIGNob2ljZXM9WyJ5IiwgIm4iXSwgZGVmYXVsdD0ibiIpDQogICAgICAgICAgICAgICAgICAgIGlmIGFuc3cgPT0gInkiOiBjb25zb2xlLnByaW50KCJUSEFOSyBZT1UgRk9SIFVTSU5HIE9VUiBUT09MIikNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnRkFJTEVEJykpDQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdQTEVBU0UgVFJZIEFHQUlOJykpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIHNlcnZpY2UgPT0gMjk6DQogICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1shXSBFTlRFUiBDQVIgREVUQUxJUycpKQ0KICAgICAgICAgICAgICAgIGNhcl9pZCA9IEludFByb21wdC5hc2soIltib2xkXVs/XSBDQVIgSURbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnWyFdIEVOVEVSIFBFUkNFTlRBR0UnKSkNCiAgICAgICAgICAgICAgICBjdXN0b20gPSBJbnRQcm9tcHQuYXNrKCJbcGlua11bP13vu79FTlRFUiBQRVJDRU5UQUdFIFRJUkVTIFUgV0FOVFsvcGlua10iKSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbcmVkXVslXSBTZXR0aW5nIFBlcmNlbnRhZ2UgWy9yZWRdOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0ubWF4X21heDIoY2FyX2lkLCBjdXN0b20pOg0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnU1VDQ0VTU0ZVTCcpKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiW2JvbGQgZ3JlZW5dWz9dIERPIFlPVSBXQU5UIFRPIEVYSVRbL2JvbGQgZ3JlZW5dID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogY29uc29sZS5wcmludCgiVEhBTksgWU9VIEZPUiBVU0lORyBPVVIgVE9PTCIpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUExFQVNFIFRSWSBBR0FJTicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDMwOg0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkXUVOVEVSIENBUiBERVRBSUxTIVsvYm9sZF0iKQ0KICAgICAgICAgICAgICAgIGNhcl9pZCA9IEludFByb21wdC5hc2soIltib2xkXVs/XSBDQVIgSURbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZF1FTlRFUiBORVcgTUlMTEFHRSFbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBjdXN0b20gPSBJbnRQcm9tcHQuYXNrKCJbYm9sZCBibHVlXVs/Xe+7v0VOVEVSIE1JTExBR0UgVSBXQU5UWy9ib2xkIGJsdWVdIikgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgcmVkXVslXSBTZXR0aW5nIFBlcmNlbnRhZ2UgWy9ib2xkIHJlZF06ICIsIGVuZD1Ob25lKQ0KICAgICAgICAgICAgICAgIGlmIGNwbS5taWxsYWdlX2NhcihjYXJfaWQsIGN1c3RvbSk6DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIGdyZWVuXVNVQ0NFU1NGVUwgKOKclClbL2JvbGQgZ3JlZW5dIikNCiAgICAgICAgICAgICAgICAgICAgYW5zdyA9IFByb21wdC5hc2soIltib2xkXVs/XSBETyBZT1UgV0FOVCBUTyBFWElUWy9ib2xkXSA/IiwgY2hvaWNlcz1bInkiLCAibiJdLCBkZWZhdWx0PSJuIikNCiAgICAgICAgICAgICAgICAgICAgaWYgYW5zdyA9PSAieSI6IGNvbnNvbGUucHJpbnQoIlRIQU5LIFlPVSBGT1IgVVNJTkcgT1VSIFRPT0wiKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KENvbG9yYXRlLkhvcml6b250YWwoQ29sb3JzLnJhaW5ib3csICdGQUlMRUQnKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ1BMRUFTRSBUUlkgQUdBSU4nKSkNCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgc2VydmljZSA9PSAzMToNCiAgICAgICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZF1FTlRFUiBDQVIgREVUQUlMUyFbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBjYXJfaWQgPSBJbnRQcm9tcHQuYXNrKCJbYm9sZF1bP10gQ0FSIElEWy9ib2xkXSIpDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGRdRU5URVIgTkVXIEJSQUtFIVsvYm9sZF0iKQ0KICAgICAgICAgICAgICAgIGN1c3RvbSA9IEludFByb21wdC5hc2soIltib2xkIGJsdWVdWz9d77u/RU5URVIgQlJBS0UgVSBXQU5UWy9ib2xkIGJsdWVdIikgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgcmVkXVslXSBTZXR0aW5nIEJSQUtFIFsvYm9sZCByZWRdOiAiLCBlbmQ9Tm9uZSkNCiAgICAgICAgICAgICAgICBpZiBjcG0uYnJha2VfY2FyKGNhcl9pZCwgY3VzdG9tKToNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgZ3JlZW5dU1VDQ0VTU0ZVTCAo4pyUKVsvYm9sZCBncmVlbl0iKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiW2JvbGRdWz9dIERPIFlPVSBXQU5UIFRPIEVYSVRbL2JvbGRdID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogY29uc29sZS5wcmludCgiVEhBTksgWU9VIEZPUiBVU0lORyBPVVIgVE9PTCIpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoQ29sb3JhdGUuSG9yaXpvbnRhbChDb2xvcnMucmFpbmJvdywgJ0ZBSUxFRCcpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChDb2xvcmF0ZS5Ib3Jpem9udGFsKENvbG9ycy5yYWluYm93LCAnUExFQVNFIFRSWSBBR0FJTicpKQ0KICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBzZXJ2aWNlID09IDMyOg0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkXUVudGVyIE5ldyBFbWFpbCFbL2JvbGRdIikNCiAgICAgICAgICAgICAgICBuZXdfZW1haWwgPSBwcm9tcHRfdmFsaWRfdmFsdWUoIltib2xkIGN5YW5dWz9dIEFjY291bnQgTmV3IEVtYWlsWy9ib2xkIGN5YW5dIiwgIkVtYWlsIiwgcGFzc3dvcmQ9RmFsc2UpDQogICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgNCiAgICAgICAgICAgICAgICAgICAgICAiW2JvbGQgcmVkXUNbL2JvbGQgcmVkXVtib2xkIGRhcmtfb3JhbmdlXUhbL2JvbGQgZGFya19vcmFuZ2VdW2JvbGQgeWVsbG93XUFbL2JvbGQgeWVsbG93XSINCiAgICAgICAgICAgICAgICAgICAgICAiW2JvbGQgZ3JlZW5dTlsvYm9sZCBncmVlbl1bYm9sZCBjeWFuXUdbL2JvbGQgY3lhbl1bYm9sZCBibHVlXUlbL2JvbGQgYmx1ZV0iDQogICAgICAgICAgICAgICAgICAgICAgIltib2xkIG1hZ2VudGFdTlsvYm9sZCBtYWdlbnRhXVtib2xkIHZpb2xldF1HWy9ib2xkIHZpb2xldF0gIg0KICAgICAgICAgICAgICAgICAgICAgICJbYm9sZCByZWRdRVsvYm9sZCByZWRdW2JvbGQgZGFya19vcmFuZ2VdTVsvYm9sZCBkYXJrX29yYW5nZV1bYm9sZCB5ZWxsb3ddQVsvYm9sZCB5ZWxsb3ddIg0KICAgICAgICAgICAgICAgICAgICAgICJbYm9sZCBncmVlbl1JWy9ib2xkIGdyZWVuXVtib2xkIGN5YW5dTFsvYm9sZCBjeWFuXVtib2xkIGJsdWVdLlsvYm9sZCBibHVlXSINCiAgICAgICAgICAgICAgICAgICAgICAiW2JvbGQgbWFnZW50YV0uWy9ib2xkIG1hZ2VudGFdW2JvbGQgdmlvbGV0XS5bL2JvbGQgdmlvbGV0XSIsDQogICAgICAgICAgICAgICAgICAgICAgIGVuZD0iIikNCiAgICAgICAgICAgICAgICBpZiBjcG0uY2hhbmdlX2VtYWlsKG5ld19lbWFpbCk6DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlxuW2JvbGQgZ3JlZW5dU1VDQ0VTU0ZVTCAo4pyUKVsvYm9sZCBncmVlbl0iKQ0KICAgICAgICAgICAgICAgICAgICBhbnN3ID0gUHJvbXB0LmFzaygiW2JvbGRdWz9dIERPIFlPVSBXQU5UIFRPIEVYSVRbL2JvbGRdID8iLCBjaG9pY2VzPVsieSIsICJuIl0sIGRlZmF1bHQ9Im4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBhbnN3ID09ICJ5IjogY29uc29sZS5wcmludCgiW2JvbGRdVGhhbmsgWW91IGZvciB1c2luZyBvdXIgdG9vbFsvYm9sZF0iKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOiBjb250aW51ZSAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlxuW2JvbGQgcmVkXUZBSUxFRFsvYm9sZCByZWRdIikNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGRdRU1BSUwgSVMgQUxSRUFEWSBSRUdJU1RFUkVEWy9ib2xkXSIpDQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlICAgICAgICANCiAgICAgICAgICAgIGVsc2U6IGNvbnRpbnVlDQogICAgICAgICAgICBicmVhaw=="))